[{"path":"index.html","id":"the-value-of-learning-r","chapter":"1 The value of learning R","heading":"1 The value of learning R","text":"Welcome! guide learning statistics R via R Studio. R powerful, open-source programming language data analysis visualization, number one programming language psychological science data science. R Studio stylish user interface coding R, makes learning R intuitive.learn R? ’s reasons:efficiently analyze visualize data project ’re working onTo collaborate promote open science, allowing others efficiently analyze visualize data tooTo gain marketable programming experienceTo learn new language way thinking problemsTo get staRted R, continue Setup page!","code":""},{"path":"setup.html","id":"setup","chapter":"2 Set-up","heading":"2 Set-up","text":"","code":""},{"path":"setup.html","id":"installing-r","chapter":"2 Set-up","heading":"2.1 Installing R","text":"R free software, can download install :http://cran.r-project.org/open page, see box top labeled “Download Install R” three different links Linux, Mac, Windows users. Choose one ’s appropriate , follow instructions page install latest version.","code":""},{"path":"setup.html","id":"installing-r-studio","chapter":"2 Set-up","heading":"2.2 Installing R Studio","text":"done , next step install RStudio. RStudio provides helpful functional interface, allow write edit R code much effectively. RStudio also free software (though developers now also offer paid “pro” versions, reading guide unlikely need). install RStudio, go :https://www.rstudio.com/RStudio’s point user-friendly wrapper R, website also bit easier navigate R directory. Click “Download” button black bar top screen, select free “RStudio Desktop” version, follow instructions page install correct version operating system.","code":""},{"path":"setup.html","id":"navigating-r-studio","chapter":"2 Set-up","heading":"2.3 Navigating R Studio","text":"Now, ’ve installed R RStudio, let’s get oriented interface ’ll working . open RStudio, get window looks roughly like . can see screen divided four quadrants.One main benefits R can write save scripts accomplish common tasks (cleaning data, specific analysis, making graphs) use script different data sets throughout research career. saves lot time effort.","code":""},{"path":"setup.html","id":"global-environment","chapter":"2 Set-up","heading":"2.3.1 Global environment","text":"","code":""},{"path":"setup.html","id":"view-pane","chapter":"2 Set-up","heading":"2.3.2 View Pane","text":", bottom right pane viewing plots getting help R. generate plot using R, show , can click export save . ’s also help interface located. can ask help r typing question mark name function, eg: {r} ?sqrt()\ncan also click help tab use search bar find help specific function.","code":""},{"path":"setup.html","id":"console","chapter":"2 Set-up","heading":"2.3.3 Console","text":"bottom left quadrant console. , can see code run, responses R generates, error messages. can also type code directly console run .","code":""},{"path":"basic-commands.html","id":"basic-commands","chapter":"3 Basic commands","heading":"3 Basic commands","text":"section cover basic commands R.","code":""},{"path":"basic-commands.html","id":"r-as-a-calculator","chapter":"3 Basic commands","heading":"3.1 R as a calculator","text":"R many ways interactive calculator, practicing using R can help build intuitions code R. practice using R calculator, try typing statements (note: spacing matter R).can ‘run’ statements number ways. efficient way click onto line code want run press CMD + Return. can also highlight multiple lines code cursor use execute lines . results display Console (bottom panel R Studio). (Alternatively: can copy paste code share https://rdrr.io/snippets/ generate results browser).","code":"2 + 2\n\n4 - 1\n\n5 * 5\n\n10 / 2"},{"path":"basic-commands.html","id":"assigning-values-to-variables","chapter":"3 Basic commands","heading":"3.2 Assigning values to variables","text":"Another important feature R using variables. Variables elements can create store R environment use future calculations.Let’s create variable refers number 7:Note: can also store variables reflect data types, topic discuss ahead):","code":"varA = 7"},{"path":"basic-commands.html","id":"using-variables-for-calculations","chapter":"3 Basic commands","heading":"3.3 Using variables for calculations","text":"variable ‘’ saved, can perform calculations directly referencing varA. instance, multiplying varA 2 produces Console produces “14.”Capitalization matters R, calculations ‘vara’ trigger error since defined variableWe can flexibly use ‘varA’ wide variety calculations.","code":"varA * 2vara * 2varA + 20\nvarA - 3 / 2\n70 / varA\nvarA * varA"},{"path":"basic-commands.html","id":"basic-functions-sqrt","chapter":"3 Basic commands","heading":"3.4 Basic functions: sqrt()","text":"Another important feature R ‘functions.’ Functions take inputs (numbers variables) transform different ways. illustrate, lets apply basic function, R’s square root function, number, variable.return functions detail future chapters.","code":"sqrt(4)\nsqrt(varA)"},{"path":"types-of-data-in-r.html","id":"types-of-data-in-r","chapter":"4 Types of data in R","heading":"4 Types of data in R","text":"R can store kinds different data, varying shape, class, size. section, ’ll first go various shapes data available: variables, vectors, data sets. ’ll discuss different classes data: integer/numeric, character, logical, factor. Finally ’ll go commands discerning size data.","code":""},{"path":"types-of-data-in-r.html","id":"shape","chapter":"4 Types of data in R","heading":"4.1 Shape","text":"","code":""},{"path":"types-of-data-in-r.html","id":"variables","chapter":"4 Types of data in R","heading":"4.1.1 Variables","text":"can store single value command like:can also store output function variable, like:orIf look global environment running lines code, ’ll see new entries “Values” list variable name (x, y, z) value stored (8, 3, 3.5).","code":"\nx = 8 \ny = sqrt(9) \nz = mean(c(2, 4, 5, 3)) "},{"path":"types-of-data-in-r.html","id":"vectors","chapter":"4 Types of data in R","heading":"4.1.2 Vectors","text":"can also store strings values, called vectors R. can string set values together using \nc() command. Technically “c” stands “concatenate” (mathematical term linking things together series), mind always think “combine.” can store strings numbers, , can store strings words/characters:useful shortcuts making certain types vectors. want vector made increasing decreasing integers, can use : command, works increasing decreasing order, like :Another useful shortcut rep() function, short “repeat.” enter first variable vector want repeat, many times want repeat . needed create vector number 2 repeated five times, ’d write:can also combine c() rep() commands sequence repeat, like :","code":"\nnumbers = c(1, 5, 12, 7, 4)   \nwords = c(\"good\", \"dog\", \"big\", \"fluffy\", \"treat\")\n1:7 ## [1] 1 2 3 4 5 6 7\n12:6 ## [1] 12 11 10  9  8  7  6\nAllTwos = rep(2, 5) \nAllTwos## [1] 2 2 2 2 2\nPetDog = rep(c(\"Pet\", \"Dog\"), 3) \nPetDog## [1] \"Pet\" \"Dog\" \"Pet\" \"Dog\" \"Pet\" \"Dog\""},{"path":"types-of-data-in-r.html","id":"indexing-vectors","chapter":"4 Types of data in R","heading":"4.1.2.1 Indexing vectors","text":"Selecting one () items longer vector called indexing. useful command ’ll build future sections. index, square brackets vector indicate position value(s) ’re interested . , see second item “numbers” vector, type numbers[2] expect see number 5 output, like :can also select multiple values vector, whether continuous.","code":"\nnumbers[2]## [1] 5\n# continuous, use : command\nwords[3:5]## [1] \"big\"    \"fluffy\" \"treat\"\n# non-continuous, use c() to create a list of the values you want to see\nwords[c(1,2,5)]## [1] \"good\"  \"dog\"   \"treat\""},{"path":"types-of-data-in-r.html","id":"data-frames","chapter":"4 Types of data in R","heading":"4.1.3 Data frames","text":"Data can also stored two-dimensional matrix called data frame. Think like spreadsheet table data. ’s example data cars already base R package:’ll learn get descriptive sense ’s data frame next chapter. now, ’s worth noting addition actual numbers (types data) comprising table , data frame can also row names column names. can list edit names rownames() colnames() commands.","code":"\nmtcars##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nrownames(mtcars)##  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n##  [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n##  [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n## [10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n## [13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n## [16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n## [19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n## [22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n## [25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n## [28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n## [31] \"Maserati Bora\"       \"Volvo 142E\"\ncolnames(mtcars)##  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n## [11] \"carb\""},{"path":"types-of-data-in-r.html","id":"indexing-data-frames","chapter":"4 Types of data in R","heading":"4.1.3.1 Indexing data frames","text":"way can index, select, certain values vector, can also index values need data frame. , use following format: dataframe[row, column]. examples:Often, ’ll want select single column within dataframe. shortcut $, wanted select “cyl” column mtcars, type:","code":"\nmtcars[4,1] #select the value in the fourth row and first column## [1] 21.4\nmtcars[2,6] #select the value in the second row and sixth column## [1] 2.875\n#You can select an entire row or column by leaving the other value blank: \nmtcars[3,] #select the entire third row##             mpg cyl disp hp drat   wt  qsec vs am gear carb\n## Datsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1\nmtcars[,5] #select the entire fifth column##  [1] 3.90 3.90 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 3.92 3.07 3.07 3.07 2.93\n## [16] 3.00 3.23 4.08 4.93 4.22 3.70 2.76 3.15 3.73 3.08 4.08 4.43 3.77 4.22 3.62\n## [31] 3.54 4.11\n#You can also select multiple rows/columns by using a vector:\nmtcars[1:5,] #select the contents of the first five rows##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nmtcars[12:16, 1:3] #within rows 12-16, select the first three columns##                      mpg cyl  disp\n## Merc 450SE          16.4   8 275.8\n## Merc 450SL          17.3   8 275.8\n## Merc 450SLC         15.2   8 275.8\n## Cadillac Fleetwood  10.4   8 472.0\n## Lincoln Continental 10.4   8 460.0\n#Finally, you can also use the row and column names to select instead of the numbers. Note that you must enclose the row/column name in quotation marks.\nmtcars[,\"cyl\"] #select all the values in the \"cyl\" column##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\nmtcars[\"Honda Civic\",\"mpg\"] #select the miles per gallon (mpg) of the Honda Civic.## [1] 30.4\nmtcars[c(\"Hornet 4 Drive\", \"Hornet Sportabout\"), ] #select all the columns for the Hornet 4 Drive and Hornet Sportabout row##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nmtcars$cyl##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4"},{"path":"types-of-data-in-r.html","id":"class","chapter":"4 Types of data in R","heading":"4.2 Class","text":"three main types vectors R: numbers, characters, logical. Numbers can represented numeric integer class vectors depending whether decimals, two classes function similarly. string words letters can stored character class vector. Finally, logical vectors store data one two values: TRUE FALSE. can find type data vector using class() argument.can create logical vector either combining TRUE FALSE values c() function. example:","code":"\n#Let's look at the two vectors we created earlier:\nnumbers = c(1, 5, 12, 7, 4)   \nwords = c(\"good\", \"dog\", \"big\", \"fluffy\", \"treat\")\n\n#What types of data do they contain?\nclass(numbers)## [1] \"numeric\"\nclass(words)## [1] \"character\"\n#Note that each vector can only be one class of data. So if you create a vector that has a mix of characters and numbers, it will be stored as a character vector.\nmixed = c(\"I am\", 16, \"going\", \"on\", 17)\nclass(mixed)## [1] \"character\"\n#You can also see what class of vector a column within a data set has:\nclass(mtcars[,\"mpg\"])## [1] \"numeric\"\n#Creating a logical vector with c(). Note that you do not need quotes here because R recognizes TRUE and FALSE (or abbreviated as T and F) specifically as representing logical data.\nlogics = c(TRUE, FALSE, TRUE, T, F)\nclass(logics)## [1] \"logical\""},{"path":"types-of-data-in-r.html","id":"relational-operators","chapter":"4 Types of data in R","heading":"4.2.1 Relational Operators","text":"Alternatively, can create logical variable asking question existing variable using relational operator. include ==, >, <, >=, <=. example, x == y asks question, “x equal y?” x < y  asks question “x less y?” , apply relational operators existing vectors:can also ask question value within column data frame, store answers new column. example, curious cars relatively poor gas mileage (’ll operationalize getting less 20 miles per gallon), following:creates new column mtcars dataframe record TRUE/FALSE values whether car gets less 20 miles per gallon.","code":"\n#Creating a logical vector with c(). Note that you do not need quotes here because R recognizes TRUE and FALSE (or abbreviated as T and F) specifically as representing logical data.\nnumbers = c(1, 5, 12, 7, 4)   \nwords = c(\"good\", \"dog\", \"big\", \"fluffy\", \"treat\")\nPetDog = rep(c(\"Pet\", \"Dog\"), 3)\n\n#We might ask which values in numbers are less than 10. \nnumbers < 10## [1]  TRUE  TRUE FALSE  TRUE  TRUE\n#To save that as a logical variable saying which numbers are small, you could:\nsmall = (numbers < 10) \n\n#You can also use the == operator with character vectors:\nPetDog == \"Pet\"## [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE\nmtcars$badmileage = mtcars$mpg < 20\nmtcars[, c(\"mpg\", \"badmileage\")] #look at the mpg and badmileage columns##                      mpg badmileage\n## Mazda RX4           21.0      FALSE\n## Mazda RX4 Wag       21.0      FALSE\n## Datsun 710          22.8      FALSE\n## Hornet 4 Drive      21.4      FALSE\n## Hornet Sportabout   18.7       TRUE\n## Valiant             18.1       TRUE\n## Duster 360          14.3       TRUE\n## Merc 240D           24.4      FALSE\n## Merc 230            22.8      FALSE\n## Merc 280            19.2       TRUE\n## Merc 280C           17.8       TRUE\n## Merc 450SE          16.4       TRUE\n## Merc 450SL          17.3       TRUE\n## Merc 450SLC         15.2       TRUE\n## Cadillac Fleetwood  10.4       TRUE\n## Lincoln Continental 10.4       TRUE\n## Chrysler Imperial   14.7       TRUE\n## Fiat 128            32.4      FALSE\n## Honda Civic         30.4      FALSE\n## Toyota Corolla      33.9      FALSE\n## Toyota Corona       21.5      FALSE\n## Dodge Challenger    15.5       TRUE\n## AMC Javelin         15.2       TRUE\n## Camaro Z28          13.3       TRUE\n## Pontiac Firebird    19.2       TRUE\n## Fiat X1-9           27.3      FALSE\n## Porsche 914-2       26.0      FALSE\n## Lotus Europa        30.4      FALSE\n## Ford Pantera L      15.8       TRUE\n## Ferrari Dino        19.7       TRUE\n## Maserati Bora       15.0       TRUE\n## Volvo 142E          21.4      FALSE\nclass(mtcars$badmileage) #check the class of the new badmileage column## [1] \"logical\""},{"path":"types-of-data-in-r.html","id":"size","chapter":"4 Types of data in R","heading":"4.3 Size","text":"useful commands ascertaining size data frame.","code":"\nnrow(mtcars) # how many rows is mtcars?## [1] 32\nncol(mtcars) # how many columns is mtcars?## [1] 12\ndim(mtcars) #print the row length and column length for mtcars.## [1] 32 12"},{"path":"data-cleaning.html","id":"data-cleaning","chapter":"5 Data Cleaning","heading":"5 Data Cleaning","text":"section cover load data, clean data, wrangle data R.","code":""},{"path":"data-cleaning.html","id":"loading-data-into-r","chapter":"5 Data Cleaning","heading":"5.1 Loading data into R","text":"’ve got data like analyze. first step load data.task, can typically use read.csv command. Assuming .csv data file located folder computer R file (always good practice!), can simply use following function store data locally data frame “df”:","code":"\ndf = read.csv(\"data.csv\")\n\n# If our csv happens to have multiple rows of headers (which is often the case when one is working with Qualtrics data, for instance), we can use the 'skip' and 'header' commands to specify the number of rows which should be treated as headers.\n\n#df = read.csv(\"data.csv\", skip = 3, header = F)"},{"path":"data-cleaning.html","id":"inspecting-data-in-r","chapter":"5 Data Cleaning","heading":"5.2 Inspecting data in R","text":"can now inspect data ensure looks ready analysis. Ideally rows columns reflect data, info variable headers. ensure everything looks good, can use following commands:","code":"\n#df # this prints our entire data frame\n\n#head(df) # 'head' shows a sneak peek of the first several rows and columns of our data\n\n#names(df) # 'names' shows our variables names\n\n# you can test out other commands as well, such as 'str', 'levels', etc)"},{"path":"data-cleaning.html","id":"subsetting-data","chapter":"5 Data Cleaning","heading":"5.3 Subsetting data","text":"might next want subset data basis variable interest. instance, perhaps want filter subjects behaved certain way. , can use subset function conditional logic.","code":"\n# In R, if we want to check if a statement is true, we use \"==\", whereas we use \"=\" to define variables\n  a = 1 # assign value 1 to a\n  b = 2 # assign value 2 to b\n  a == 1 # check if a is equal to 1 (TRUE)## [1] TRUE\n  a == 2 # check if a is equal to 2 (FALSE)## [1] FALSE\ndf_fair = subset(df, df$fairness_violation == \"violator\") # this creates a new dataframe with only subjects whose score on the variable 'fairness_violation' is equal to \"violator\" (which means that in this choice task they made decisions which they believed were unfair)"},{"path":"data-cleaning.html","id":"computing-averages-of-several-variables","chapter":"5 Data Cleaning","heading":"5.4 Computing averages of several variables","text":"Another data cleaning task might wish accomplish create variable average several variables. can different ways.","code":"\n# Imagine we have five identical decisions made at different time points, if we want the average of those decisions we can simply average them together as follows:\n\ndf$decision_avg = (df$decision1+df$decision2+df$decision3+df$decision4+df$decision5)/5\n\n# We can now inspect the group average of this variable:\n\nmean(df$decision_avg)## [1] 30.97682\n# We can also do a basic visualization (a histogram) of the data to ensure it looks okay\n\nhist(df$decision_avg)"},{"path":"data-cleaning.html","id":"recoding-variables","chapter":"5 Data Cleaning","heading":"5.5 Recoding variables","text":"final task might wish accomplish recoding data. instance, raw data file might gender coded ‘1,’ ‘2,’ ‘3,’ ‘4.’ R, can easily update value variable reflect true qualitative value.","code":"\nhead(df$gender)## [1] 1 1 1 1 2 1\n# Currently, our gender variable is We can apply value labels to in\n\ndf$gender = factor(df$gender,\nlevels = c(1,2,3,4),\nlabels = c(\"Female\", \"Male\", \"Other\", \"Prefer Not To Say\"))  # Here, each value is being changed to a meaningful string which reflects its qualitative category.\n\n# Now we can observe this change:\n\nhead(df$gender)## [1] Female Female Female Female Male   Female\n## Levels: Female Male Other Prefer Not To Say"},{"path":"data-cleaning.html","id":"removing-missing-data","chapter":"5 Data Cleaning","heading":"5.6 Removing missing data","text":"Imagine missing values subjects number variables. variable crucial analysis, can exclude subjects full stop. However, might also wish include data possible. Fortunately R functions possibilities.hope helps clarify perform basic steps data cleaning.","code":"\n# We can use na.omit to remove any columns and rows with missing data\n\ndf = na.omit(df)\n\n# Alternatively, we can selectively deploy na.omit within our actual statistical tests. Indeed, most packages in R allow one to specify whether to omit missing data because missing data can often cause packages to not run properly. For instance, we can specify that a t-test we wish to perform (a topic we will discuss in further detail in a future chapter) should omit missing values.\n\nt.test(df$decision1, df$decision2, na.omit=TRUE) ## \n##  Welch Two Sample t-test\n## \n## data:  df$decision1 and df$decision2\n## t = 0.37765, df = 1289.8, p-value = 0.7058\n## alternative hypothesis: true difference in means is not equal to 0\n## 95 percent confidence interval:\n##  -1.883128  2.780961\n## sample estimates:\n## mean of x mean of y \n##  31.03715  30.58824"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
